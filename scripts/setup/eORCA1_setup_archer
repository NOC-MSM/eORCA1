#!/bin/bash
# Lightweight script to set up eORCA1
 
display_usage() { 
   echo
   echo "  Auto-Config: eORCA1"
   echo "  ***************************************"
   echo
   echo "  usage: ${0##*/} -w path_to_install_nemo -x path_to_intall_xios -s path_to_repo -m machine -v version"
   echo
   echo "  flags:  -w full path to where nemo will be installed"
   echo "          -x full path to where xios will be installed"
   echo "          -s full path to where eORCA1 repository resides"
   echo "          -m machine on which to compile code"
   echo "          -v which version of NEMO to check out"
   echo
   exit 1
	} 
# if less than three arguments supplied, display usage 
	if [  $# -le 9 ] 
	then 
		display_usage
		exit 1
	fi 
# if less than two arguments supplied, display usage 
	if [  $# -ge 11 ] 
	then 
		display_usage
		exit 1
	fi 
# check whether user had supplied -h or --help . If yes display usage 
	if [[ ( $# == "--help") ||  $# == "-h" ]] 
	then 
		display_usage
		exit 0
	fi 

while getopts w:x:s:m:v: option
  do
  case "${option}"
  in
  w) export WORK_DIR=${OPTARG};;
  x) export XIOS_DIR=${OPTARG};;
  s) export REPO_DIR=${OPTARG};;
  m) export HPC_TARG=${OPTARG};;
  v) export NEMO_VER=${OPTARG};;
  esac
done

if [ ${WORK_DIR:0:1} != "/" ]; then
  echo "WORK_DIR must use full path"
  exit 1
fi

if [ ${XIOS_DIR:0:1} != "/" ]; then
  echo "XIOS_DIR must use full path"
  exit 1
fi

if [ ${REPO_DIR:0:1} != "/" ]; then
  echo "REPO_DIR must use full path"
  exit 1
fi

# Change to some working directory of choice
if [ ! -d "$WORK_DIR" ]; then
  mkdir $WORK_DIR
fi
cd $WORK_DIR

echo "Making sure that the correct modules are loaded"

case "${HPC_TARG}"
  in
  archer)  module swap PrgEnv-cray PrgEnv-intel
           module load cray-hdf5-parallel
           module load cray-netcdf-hdf5parallel
           ;;
  *)       echo "Machine not recognised"
           echo "Machines available: archer"
           exit 1
esac

case "${NEMO_VER}"
  in
  4.0.2)   echo "NEMO Verion 4.0.2 will be checked out"
           ;;
  4.0.3)   echo "NEMO Verion 4.0.3 will be checked out"
           ;;
  4.0.4)   echo "NEMO Verion 4.0.4 will be checked out"
           ;;
  4.0.5)   echo "NEMO Verion 4.0.5 will be checked out"
           ;;
  trunk)   echo "NEMO trunk will be checked out"
           ;;
  *)       echo "NEMO Version not recognised"
           echo "Versions available: 4.0.2, 4.0.3, 4.0.4, 4.0.5 and trunk"
           exit 1
esac

# Checkout the NEMO code from the SVN Paris repository 
echo "Checking out NEMO repository"
case "${NEMO_VER}"
  in
  trunk)   svn co http://forge.ipsl.jussieu.fr/nemo/svn/NEMO/trunk --depth empty nemo
           svn co http://forge.ipsl.jussieu.fr/nemo/svn/NEMO/trunk/src --depth infinity nemo/src
           svn co http://forge.ipsl.jussieu.fr/nemo/svn/NEMO/trunk/cfgs/SHARED nemo/cfgs/SHARED
           svn export http://forge.ipsl.jussieu.fr/nemo/svn/NEMO/trunk/cfgs/ref_cfgs.txt nemo/cfgs/ref_cfgs.txt
           ;;
  *)       svn co http://forge.ipsl.jussieu.fr/nemo/svn/NEMO/releases/r4.0/r$NEMO_VER --depth empty nemo
           svn co http://forge.ipsl.jussieu.fr/nemo/svn/NEMO/releases/r4.0/r$NEMO_VER/src --depth infinity nemo/src
           svn co http://forge.ipsl.jussieu.fr/nemo/svn/NEMO/releases/r4.0/r$NEMO_VER/cfgs/SHARED nemo/cfgs/SHARED
           svn export http://forge.ipsl.jussieu.fr/nemo/svn/NEMO/releases/r4.0/r$NEMO_VER/cfgs/ref_cfgs.txt nemo/cfgs/ref_cfgs.txt
           ;;     
esac

cd nemo

for ext_name in mk FCM IOIPSL   
  do   
  ext=`svn propget svn:externals | grep $ext_name | cut -c2-`   
  svn co http://forge.ipsl.jussieu.fr/nemo/svn/$ext
done

ext=`svn propget svn:externals | grep makenemo | cut -c2-`
svn export http://forge.ipsl.jussieu.fr/nemo/svn/$ext

mkdir arch

# Setup the directory structure for the ENSEMBLE
mkdir $WORK_DIR/nemo/cfgs/eORCA1
# Define the location of where the eORCA1 forcing files are to be downloaded 
export DOWNLOAD_DIR="$WORK_DIR/nemo/cfgs/eORCA1/EXP00/"

echo $XIOS_DIR
# Choose an appropriate directory for your XIOS installation
if [ ! -d "$XIOS_DIR" ]; then
  mkdir $XIOS_DIR
fi
cd $XIOS_DIR
echo $PWD
echo "Checking out xios repository"
svn co http://forge.ipsl.jussieu.fr/ioserver/svn/XIOS/branchs/xios-2.5@1627 xios
cd xios
cp $REPO_DIR/arch/xios/* ./arch
echo "Compiling xios"
./make_xios --full --prod --arch archer --netcdf_lib netcdf4_par --job 4

# Let's update the path to xios
export XIOS_DIR=$XIOS_DIR/xios

cd $WORK_DIR/nemo
cp $REPO_DIR/arch/nemo/* ./arch
# Dirty fix to hard wire path otherwise user will have to set XIOS_DIR in every new shell session
sed "s?XXX_XIOS_DIR_XXX?$XIOS_DIR?" ./arch/arch-archer.fcm > tmp_arch
mv tmp_arch ./arch/arch-archer.fcm

echo 'eORCA1 OCE ICE' >> $WORK_DIR/nemo/cfgs/work_cfgs.txt

mkdir cfgs/eORCA1/EXP00
echo "Gathering forcing data"

export CONFIG_DIR=$WORK_DIR/nemo/cfgs/eORCA1

# Set up EXP00 for quick testing of the unforced case

cd $CONFIG_DIR/EXP00
ln -s ../../SHARED/namelist_ref namelist_ref
ln -s ../../SHARED/namelist_ice_ref namelist_ice_ref
ln -s ../../SHARED/grid_def_nemo.xml grid_def_nemo.xml
ln -s ../../SHARED/field_def_nemo-oce.xml field_def_nemo-oce.xml
ln -s ../../SHARED/field_def_nemo-ice.xml field_def_nemo-ice.xml
ln -s ../../SHARED/domain_def_nemo.xml domain_def_nemo.xml
ln -s ../../SHARED/axis_def_nemo.xml axis_def_nemo.xml
ln -s ../INPUTS INPUTS

mkdir meta_out
mkdir RESTARTS
mkdir OUTPUTS

cd ../
mkdir INPUTS

wget -r -nd -np -e robots=off -A '*.nc' http://gws-access.jasmin.ac.uk/public/jmmp_collab/eORCA1/ -P $CONFIG_DIR/INPUTS/

ln -s $XIOS_DIR/bin/xios_server.exe $CONFIG_DIR/EXP00/xios_server.exe

cp $REPO_DIR/EXP00/* $CONFIG_DIR/EXP00/
cp -r $REPO_DIR/MY_SRC $CONFIG_DIR
case "${NEMO_VER}"
  in
  trunk)  cp $REPO_DIR/cpp_eORCA1_trunk.fcm $CONFIG_DIR/cpp_eORCA1.fcm
          ;;
  *)      cp $REPO_DIR/cpp_eORCA1_r4.fcm $CONFIG_DIR/cpp_eORCA1.fcm
          ;;
esac

cd $WORK_DIR/nemo

echo "Compiling nemo eORCA1 Config"
./makenemo -m archer -r eORCA1 -j 8

echo
echo "  Auto-Config: eORCA1"
echo "  *****************************"
echo
echo "  To run the eORCA1 Configuration:"
echo
echo "  - update the runscript.pbs accordingly "
echo "      (project code, nodes, modules, etc)"
echo
echo "  - submit via the qsub command"
echo    
